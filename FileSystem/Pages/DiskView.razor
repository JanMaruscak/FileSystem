@page "/fs/disk/{Location?}"

@using FileSystem.Models
@using FileSystem.Data
@using MongoDB.Bson
@inject NavigationManager NavigationManager
@inject FileSystemService FileSystemService

<h3>@Location://</h3>
@if (_files == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Type</th>
            <th>Name</th>
            <th>Created</th>
            <th>Last Edit</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var file in _files)
        {
            <tr>
                <td @onclick="@(e => ViewFile(file.Id.ToString()))">File</td>
                <td>@file.Name</td>
                <td>@file.Created</td>
                <td>@file.LastEdit</td>
                <td @onclick="@(e => DeleteFile(file.Id))">Delete</td>
            </tr>
        }
        @foreach (var folder in _folders)
                {
                    <tr>
                        <td @onclick="@(e => ViewFolder(folder.Id.ToString()))">Folder</td>
                        <td>@folder.Name</td>
                        <td>@folder.Created</td>
                        <td>@folder.LastEdit</td>
                        <td @onclick="@(e => DeleteFolder(folder.Id))">Delete</td>
                    </tr>
                }
        </tbody>
    </table>
    
    <select @bind=_newInsertType>
        <option value="folder">Folder</option>
        <option value="file">File</option>
    </select>
    @switch (_newInsertType)
    {
        case "folder":
            <input type="text" @bind="_newFolderName"/>
            <button @onclick="InsertFolder">Add @_newInsertType</button>
            break;
        case "file":
            <input type="text" @bind="_newFileName"/>
            <button @onclick="InsertFile">Add @_newInsertType</button>
            break;
    }

@code {
    [Parameter]
    public string Location { get; set; }

    private Disk _current; 
    private string _newInsertType = "file";
    private string _newFileName;
    private string _newFolderName;
    
    private List<File> _files;
    private List<Folder> _folders;

    protected override async Task OnInitializedAsync()
    {
        _current = FileSystemService.GetDiskById(new ObjectId(Location));
        _files = await FileSystemService.GetFilesAsync(_current.Id, FileSystemService.ParentType.Disk);
        _folders = await FileSystemService.GetFoldersAsync(_current.Id,FileSystemService.ParentType.Disk);
    }

    private async void InsertFile()
    {
        var newFile = new File
        {
            Content = "",
            Created = DateTime.Now,
            Id =  ObjectId.GenerateNewId(),
            LastEdit = DateTime.Now,
            Name = _newFileName,
            Parent = FileSystemService.GetDiskById(new ObjectId(Location)).Id,
            IsParentFolder = false
        };
        await FileSystemService.InsertFileAsync(newFile);
        _files.Add(newFile);
        StateHasChanged();
    }

    private async void InsertFolder()
    {
        var newFolder = new Folder
        {
            Created = DateTime.Now,
            Id =  ObjectId.GenerateNewId(),
            LastEdit = DateTime.Now,
            Name = _newFolderName,
            Parent = FileSystemService.GetDiskById(new ObjectId(Location)).Id,
            Files = new List<ObjectId>(),
            Subfolders = new List<ObjectId>(),
            TotalSize = 0,
            IsParentFolder = false
        };
        await FileSystemService.InsertFolderAsync(newFolder);
        _folders.Add(newFolder);
        StateHasChanged();
    }

    private void DeleteFolder(ObjectId id)
    {
        FileSystemService.Delete(id, FileSystemService.ParentType.Folder);
    }
    private void DeleteFile(ObjectId id)
    {
        FileSystemService.Delete(id, FileSystemService.ParentType.File);
    }
    void ViewFolder(string folderId)
    {
        NavigationManager.NavigateTo($"fs/folder/{folderId}");
    }
    void ViewFile(string fileId)
    {
        NavigationManager.NavigateTo($"fs/file/{fileId}");
    }

}}