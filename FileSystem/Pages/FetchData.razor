@page "/fs"

@using FileSystem.Data
@using FileSystem.Models
@using MongoDB.Bson
@using MongoDB.Driver
@inject FileSystemService FileSystemService
@inject NavigationManager NavigationManager

<h1>File system</h1>

<p>@Location</p>


@if (disks == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Size</th>
            <th>Created</th>
            <th>Last Edit</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var disk in disks)
        {
            <tr>
                <td @onclick="@(e => MethodToTriggerUrl(disk.Name.ToString()))">@disk.Name</td>
                <td>@disk.TotalSize</td>
                <td>@disk.Created</td>
                <td>@disk.LastEdit</td>
            </tr>
        }
        </tbody>
    </table>
    <select @bind=NewInsertType>
        <option value="folder">Folder</option>
        <option value="file">File</option>
        <option value="disk">Disk</option>
    </select>
    @switch (NewInsertType)
    {
        case "folder":
            
            break;
        case "file":
            <input type="text" @bind="newFile.Name"/>
            <button @onclick="InsertFile">Add @NewInsertType</button>
            break;
        case "disk":
            <input type="text" @bind="newDisk.Name"/>
            <button @onclick="InsertDisk">Add @NewInsertType</button>
            break;
    }


}

@code {
    [Parameter]
    public string Location { get; set; }

    private string NewInsertType = "folder";
        
    private List<Disk> disks;
    private List<File> files;
    private List<Folder> folders;
    private Disk newDisk = new Disk(){Created = DateTime.Now, LastEdit = DateTime.Now,TotalSize = 0, Files =  {}, Folders = {}};
    private File newFile = new File(){Created = DateTime.Now, LastEdit = DateTime.Now, Id = new ObjectId("5fc908ed697769e106a6fee0")};
    private Folder newFolder = new Folder(){Created = DateTime.Now, LastEdit = DateTime.Now,TotalSize = 0};

    protected override async Task OnInitializedAsync()
    {
        disks = await FileSystemService.GetDisksAsync();
    }

    public async void InsertDisk()
    {
        FileSystemService.InsertDisk(newDisk);
        disks = await FileSystemService.GetDisksAsync();
    }
    public async void InsertFile()
    {
        FileSystemService.InsertFile(newFile);
        disks = await FileSystemService.GetDisksAsync();
    }
    void MethodToTriggerUrl(string disk)
    {
        NavigationManager.NavigateTo($"fs/{disk}");
    }

}