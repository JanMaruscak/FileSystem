@page "/fs"

@using FileSystem.Data
@using FileSystem.Models
@using MongoDB.Bson
@using MongoDB.Driver
@inject FileSystemService FileSystemService
@inject NavigationManager NavigationManager

<h1>Disks</h1>

<p>@Location</p>


@if (_disks == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Size</th>
            <th>Created</th>
            <th>Last Edit</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var disk in _disks)
        {
            <tr>
                <td @onclick="@(e => MethodToTriggerUrl(disk.Name.ToString()))">@disk.Name</td>
                <td>@disk.TotalSize</td>
                <td>@disk.Created</td>
                <td>@disk.LastEdit</td>
            </tr>
        }
        </tbody>
    </table>
    <input type="text" @bind="_newDiskName"/>
    <button @onclick="InsertDisk">Add disk "@_newDiskName"</button>


}

@code {
    [Parameter]
    public string Location { get; set; }
    private string _newDiskId;
    private string _newDiskName;
        
    private List<Disk> _disks;

    protected override async Task OnInitializedAsync()
    {
        _disks = await FileSystemService.GetDisksAsync();
    }

    public async void InsertDisk()
    {
        var newDisk = new Disk()
        {
            Created = DateTime.Now,
            Files = new List<ObjectId>(),
            Folders = new List<ObjectId>(),
            Id = ObjectId.GenerateNewId(),
            LastEdit = DateTime.Now,
            Name = _newDiskName,
            TotalSize = 0
        };
        await FileSystemService.InsertDiskAsync(newDisk);
        _disks = await FileSystemService.GetDisksAsync();
    }
    void MethodToTriggerUrl(string disk)
    {
        NavigationManager.NavigateTo($"fs/{disk}");
    }

}